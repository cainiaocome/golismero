#!/usr/bin/env python
# -*- coding: utf-8 -*-

__license__="""
GoLismero 2.0 - The web knife - Copyright (C) 2011-2013

Authors:
  Daniel Garcia Garcia a.k.a cr0hn | cr0hn<@>cr0hn.com
  Mario Vilas | mvilas<@>gmail.com

Golismero project site: https://github.com/cr0hn/golismero/
Golismero project mail: golismero.project<@>gmail.com

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""

__all__ = ["Vulnerability", "UrlVulnerability"]

from .. import Data, overwrite


#------------------------------------------------------------------------------
class Vulnerability(Data):
    """
    Base class for all vulnerabilities reported by the testing plugins.
    """

    data_type = Data.TYPE_VULNERABILITY
    vulnerability_type = "generic"
    max_vulnerabilities = 0


    #
    # TODO:
    #
    # We should have different default values for the constructor for each
    # vulnerability class. One easy way of doing it without having to
    # override the constructor is defining class variables with the defaults.
    #
    # Also, the vulnerability_type may be automatically obtained from the
    # module pathname using introspection and a metaclass.
    #


    #----------------------------------------------------------------------
    def __init__(self, impact=0, cve="", cwe="", severity=0, risk=0, references=()):
        """
        Vulnerability.

        :param impact: Impact rating.
        :type impact: int

        :param cve: CVE ID.
        :type cve: str

        :param cwe: CVE ID.
        :type cwe: str

        :param risk: risk of vulnerability
        :type risk: int

        :param severity: Severity rating.
        :type severity: int

        :param references: Reference URLs.
        :type references: list of str
        """

        # Vulnerability properties.
        self.__impact = impact
        self.__cve = cve
        self.__cwe = cwe
        self.__severity = severity
        self.__risk = risk
        self.__references = references

        # Parent constructor.
        super(Vulnerability, self).__init__()


    #----------------------------------------------------------------------

    @overwrite
    def impact(self):
        return self.__impact

    @impact.setter
    def impact(self, impact):
        self.__impact = impact

    @overwrite
    def cve(self):
        return self.__cve

    @cve.setter
    def cve(self, cve):
        self.__cve = cve

    @overwrite
    def cwe(self):
        return self.__cwe

    @cwe.setter
    def cwe(self, cwe):
        self.__cwe = cwe

    @overwrite
    def severity(self):
        return self.__severity

    @severity.setter
    def severity(self, severity):
        self.__severity = severity

    @overwrite
    def risk(self):
        return self.__risk

    @risk.setter
    def risk(self, risk):
        self.__risk = risk

    @overwrite
    def references(self):
        return self.__references

    @references.setter
    def references(self, references):
        self.__references = references


    #----------------------------------------------------------------------
    @property
    def associated_resources(self):
        """
        Get a list with resources associated to this vulnerability.

        :return: List with resources.
        :rtype: list
        """
        return self.get_linked_data(Data.TYPE_RESOURCE)


    #----------------------------------------------------------------------
    @property
    def associated_informations(self):
        """
        Get a list with informations associated to this vulnerability.

        :return: List with informations.
        :rtype: list
        """
        return self.get_linked_data(Data.TYPE_INFORMATION)


    #----------------------------------------------------------------------
    def add_resource(self, res):
        """
        Add resource elements associated to a vulnerability.

        :param res: Resource element.
        :type res: Resource
        """
##        if not isinstance(info, Resource):
##            raise TypeError("Expected Resource, got %s instead" % type(res))
        self.add_link(res)


    #----------------------------------------------------------------------
    def add_information(self, info):
        """
        Add information elements associated to a vulnerability.

        :param info: Information element.
        :type info: Information
        """
##        if not isinstance(info, Information):
##            raise TypeError("Expected Information, got %s instead" % type(info))
        self.add_link(info)


#------------------------------------------------------------------------------
class UrlVulnerability(Vulnerability):
    """
    Base class for all vulnerabilities associated with a single URL.
    """

    min_resources = 1
    max_resources = 1
    max_informations = 0


    #----------------------------------------------------------------------
    def __init__(self, url, impact=0, cve="", cwe="", severity=0, risk=0, references=()):
        """
        Vulnerability.

        :param url: URL where the vulnerability was found.
        :type url: Url

        :param impact: Impact rating.
        :type impact: int

        :param cve: CVE ID.
        :type cve: str

        :param cwe: CVE ID.
        :type cwe: str

        :param risk: risk of vulnerability
        :type risk: int

        :param severity: Severity rating.
        :type severity: int

        :param references: Reference URLs.
        :type references: list of str
        """

        # Parent constructor.
        super(UrlVulnerability, self).__init__()

        # Add the reference to the URL where the vulnerability was found.
        self.add_resource(url)


    #----------------------------------------------------------------------
    def __str__(self):
        return str(self.url)

    def __repr__(self):
        return "<%s url=%s>" % (self.__class__.__name__, self.url)


    #----------------------------------------------------------------------

    @property
    def url(self):
        """
        str -- Raw URL.
        """
        return self.associated_resources.pop()

    @property
    def method(self):
        """
        str -- HTTP method.
        """
        return self.url.method

    @property
    def post_params(self):
        """
        dict(str) -- POST parameters.
        """
        return self.url.post_params

    @property
    def referer(self):
        """
        str -- Referer for this URL.
        """
        return self.url.referer

    @property
    def url_params(self):
        """
        dict(str) -- URL parameters.
        """
        return self.url.url_params

    @property
    def is_https(self):
        """
        bool -- True if it's HTTPS, False otherwise.
        """
        return self.url.is_https

    @property
    def has_url_param(self):
        """
        bool - True if there are URL params, False otherwise.
        """
        return bool(self.url_params)

    @property
    def has_post_param(self):
        """
        bool - True if there are POST params, False otherwise.
        """
        return bool(self.post_params)

    @property
    def content_type(self):
        """
        str - MIME content type.
        """
        return self.url.content_type

    @property
    def request_type(self):
        """
        int - One of the HTML.TYPE_* constants.
        """
        return self.url.request_type
