#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Vulnerability types.
"""

__license__ = """
GoLismero 2.0 - The web knife - Copyright (C) 2011-2013

Authors:
  Daniel Garcia Garcia a.k.a cr0hn | cr0hn<@>cr0hn.com
  Mario Vilas | mvilas<@>gmail.com

Golismero project site: https://github.com/golismero
Golismero project mail: golismero.project<@>gmail.com

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""

__all__ = ["Vulnerability", "UrlVulnerability"]

from .. import Data, overwrite, LocalDataCache
from ..resource.url import BaseUrl, FolderUrl, Url
from ...config import Config

from warnings import warn


#------------------------------------------------------------------------------
class Vulnerability(Data):
    """
    Base class for all vulnerabilities.
    """

    data_type = Data.TYPE_VULNERABILITY
    vulnerability_type = "generic"
    max_vulnerabilities = 0


    VULN_LEVELS = ("critical", "high", "middle", "low", "informational")

    # Default vulnerability properties.
    DEFAULTS = {
        "level":       "low",
        "description": "A vulnerability has been found.",
        "plugin_id":   None,
        "impact":      0,
        "severity":    0,
        "risk":        0,
        "cve":         (),
        "cwe":         "",
        "references":  (),
    }


    #--------------------------------------------------------------------------
    def __init__(self, **kwargs):
        """
        :param level: User-friendly vulnerability level. Must be one of the following values: "critical", "high", "middle", "low" or "informational".
        :type level: str

        :param description: Free form text describing the vulnerability.
        :type description: str

        :param plugin_id: ID of the plugin that found the vulnerability. Defaults to the calling plugin ID.
        :type plugin_id: str

        :param cve: CVE ID.
        :type cve: str

        :param cwe: CVE ID.
        :type cwe: str

        :param impact: Impact rating. A number between 0-4.
        :type impact: int

        :param severity: Severity rating. A number between 0-4.
        :type severity: int

        :param risk: Risk rating. A number between 0-4.
        :type risk: int

        :param references: Reference URLs.
        :type references: tuple(str)
        """

        # Validate the keyword arguments.
        not_found = set(kwargs.keys()).difference(Vulnerability.DEFAULTS.keys())
        if not_found:
            raise TypeError("Unexpected keyword arguments: %s" % ", ".join(sorted(not_found)))
        del not_found

        # Set the properties.
        for prop in Vulnerability.DEFAULTS.iterkeys():
            value = kwargs.get(prop)
            if value is None:
                value = self.DEFAULTS.get(prop)
                if value is None:
                    value = Vulnerability.DEFAULTS.get(prop)
            setattr(self, prop, value)

        # Newly found vulns are real by default, even if previously marked
        # as false positives. That's because if they've been found again
        # the user should review them again. (This logic may change later,
        # see tickets #98 and #107).
        self.false_positive = False

        # Call the parent constructor.
        super(Vulnerability, self).__init__()


    #--------------------------------------------------------------------------
    def __repr__(self):
        return "<%s plugin_id=%r level=%r desc=%r>" % (
            self.__class__.__name__,
            self.plugin_id,
            self.level,
            self.description,
        )


    #--------------------------------------------------------------------------
    @overwrite
    def false_positive(self):
        """
        :returns: True for false positives, False for real vulnerabilities.
        :rtype: str
        """
        return self.__false_positive


    #--------------------------------------------------------------------------
    @false_positive.setter
    def false_positive(self, false_positive):
        """
        :returns: True for false positives, False for real vulnerabilities.
        :rtype: str
        """
        self.__false_positive = bool(false_positive)


    #--------------------------------------------------------------------------
    @overwrite
    def plugin_id(self):
        """
        :returns: ID of the plugin that found the vulnerability.
        :rtype: str
        """
        return self.__plugin_id


    #--------------------------------------------------------------------------
    @plugin_id.setter
    def plugin_id(self, plugin_id):
        """
        :param plugin_id: ID of the plugin that found the vulnerability.
            Defaults to the calling plugin ID.
        :type plugin_id: str
        """
        if not plugin_id:
            try:
                plugin_id = Config.plugin_name
            except AttributeError:
                plugin_id = "GoLismero"
        self.__plugin_id = plugin_id


    #--------------------------------------------------------------------------
    @overwrite
    def level(self):
        """
        :return: Vulnerability level.
        :rtype: str
        """
        return self.__level


    #--------------------------------------------------------------------------
    @level.setter
    def level(self, level):
        """
        :param level: User-friendly vulnerability level.
        :type level: str
        """
        if not isinstance(level, basestring):
            raise TypeError("Expected basestring, got '%s'" % type(level))
        elif level.lower() not in self.VULN_LEVELS:
            raise ValueError("Value of level are wrong. Allowed levels are: critical, high, middle, low, informational")

        self.__level = level.lower()


    #--------------------------------------------------------------------------
    @overwrite
    def impact(self):
        """
        :returns: Impact rating.
        :rtype: int
        """
        return self.__impact


    #--------------------------------------------------------------------------
    @impact.setter
    def impact(self, impact):
        """
        :param impact: Impact rating.
        :type impact: int
        """
        if impact < 0 or impact > 4:
            raise ValueError("Impact values must be between 1-5.")

        self.__impact = impact


    #--------------------------------------------------------------------------
    @overwrite
    def cve(self):
        """
        :returns: CVE ID.
        :rtype: tuple(str)
        """
        return self.__cve


    #--------------------------------------------------------------------------
    @cve.setter
    def cve(self, cve):
        """
        :param cve: CVE ID.
        :type cve: tuple(str)
        """
        if not cve:
            cve = ()

        self.__cve = cve


    #--------------------------------------------------------------------------
    @overwrite
    def cwe(self):
        """
        :returns: CWE ID.
        :rtype: str
        """
        return self.__cwe


    #--------------------------------------------------------------------------
    @cwe.setter
    def cwe(self, cwe):
        """
        :param cwe: CWE ID.
        :type cwe: str
        """
        self.__cwe = cwe


    #--------------------------------------------------------------------------
    @overwrite
    def severity(self):
        """
        :returns: Severity rating.
        :rtype: int
        """
        return self.__severity


    #--------------------------------------------------------------------------
    @severity.setter
    def severity(self, severity):
        """
        :param severity: Severity rating.
        :type severity: int
        """
        if severity < 0 or severity > 4:
            raise ValueError("Severity values must be between 1-5.")

        self.__severity = severity


    #--------------------------------------------------------------------------
    @overwrite
    def risk(self):
        """
        :returns: Risk rating.
        :rtype: int
        """
        return self.__risk


    #--------------------------------------------------------------------------
    @risk.setter
    def risk(self, risk):
        """
        :param risk: Risk rating.
        :type risk: int
        """
        if risk < 0 or risk > 4:
            raise ValueError("Risk values must be between 1-5.")

        self.__risk = risk


    #--------------------------------------------------------------------------
    @overwrite
    def description(self):
        """
        :returns: Free form text describing the vulnerability.
        :rtype: str
        """
        return self.__description


    #--------------------------------------------------------------------------
    @description.setter
    def description(self, description):
        """
        :param description: Free form text describing the vulnerability.
        :type description: str
        """
        self.__description = description


    #--------------------------------------------------------------------------
    @overwrite
    def references(self):
        """
        :returns: Reference URLs.
        :rtype: tuple(str)
        """
        return self.__references


    #--------------------------------------------------------------------------
    @references.setter
    def references(self, references):
        """
        :param references: Reference URLs.
        :type references: tuple(str)
        """
        if not references:
            references = ()

        self.__references = references


#------------------------------------------------------------------------------
class UrlVulnerability(Vulnerability):
    """
    Base class for all vulnerabilities associated with a single URL.
    """

    min_resources = 1
    max_resources = 1
    max_informations = 0


    #--------------------------------------------------------------------------
    def __init__(self, url, **kwargs):
        """
        :param url: URL where the vulnerability was found.
        :type url: Url

        """

        # Sanitize the "url" argument.
        if not isinstance(url, Url) and not isinstance(url, FolderUrl) and not isinstance(url, BaseUrl):
            if isinstance(url, basestring):
                msg = "You should pass an Url object to %s instead of a string!"
                msg %= self.__class__.__name__
                url = Url(str(url))
                LocalDataCache.on_autogeneration(url)
            elif hasattr(url, "url"):
                try:
                    t = url.__class__.__name__
                except Exception:
                    t = str(type(url))
                msg = "You should pass an Url object to %s instead of %s!"
                msg %= (self.__class__.__name__, t)
                url = url.url
                if isinstance(url, basestring):
                    url = Url(str(url))
                    LocalDataCache.on_autogeneration(url)
                elif not isinstance(url, Url):
                    raise TypeError("Expected Url, got %s instead" % t)
            warn(msg, RuntimeWarning, stacklevel=2)

        # Save the raw URL.
        self.__url = url.url

        # Parent constructor. Must be called before adding associations!
        super(UrlVulnerability, self).__init__(**kwargs)

        # Add the reference to the URL where the vulnerability was found.
        self.add_resource(url)

    __init__.__doc__ += Vulnerability.__init__.__doc__


    #--------------------------------------------------------------------------
    def __str__(self):
        return self.url


    #--------------------------------------------------------------------------
    def __repr__(self):
        return "<%s url=%r plugin_id=%r level=%r desc=%r>" % (
            self.__class__.__name__,
            self.url,
            self.plugin_id,
            self.level,
            self.description,
        )


    #--------------------------------------------------------------------------
    @property
    def url(self):
        """
        :return: Raw URL where the vulnerability was found.
        :rtype: str
        """
        return self.__url
