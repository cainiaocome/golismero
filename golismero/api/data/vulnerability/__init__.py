#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Vulnerability types.
"""

__license__ = """
GoLismero 2.0 - The web knife - Copyright (C) 2011-2013

Authors:
  Daniel Garcia Garcia a.k.a cr0hn | cr0hn<@>cr0hn.com
  Mario Vilas | mvilas<@>gmail.com

Golismero project site: https://github.com/golismero
Golismero project mail: golismero.project<@>gmail.com

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""

__all__ = ["Vulnerability", "UrlVulnerability"]

from .. import Data, identity, merge, keep_newer, keep_true, LocalDataCache
from ..resource.url import BaseUrl, FolderUrl, Url
from ...config import Config
from ...text.text_utils import convert_vuln_ids_to_references, \
     convert_references_to_vuln_ids

from warnings import warn


#------------------------------------------------------------------------------
class Vulnerability(Data):
    """
    Base class for all vulnerabilities.
    """

    data_type = Data.TYPE_VULNERABILITY
    vulnerability_type = "abstract"
    max_vulnerabilities = 0


    VULN_LEVELS = ("critical", "high", "middle", "low", "informational")

    # Default vulnerability properties.
    DEFAULTS = {
        "level":       "low",
        "title":       "A vulnerability has been found",
        "description": "A vulnerability has been found.",
        "solution":    "",
        "plugin_id":   None,
        "impact":      0,
        "cvss_base":   0,
        "cvss_base_vector":  "",
        "severity":    0,
        "risk":        0,
        "bid":         (),
        "capec":       (),
        "cve":         (),
        "cwe":         (),
        "osvdb":       (),
        "sa":          (),
        "sectrack":    (),
        "xf":          (),
        "references":  (),
    }


    #--------------------------------------------------------------------------
    def __init__(self, **kwargs):
        """
        :param level: User-friendly vulnerability level. Must be one of the following values: "critical", "high", "middle", "low" or "informational".
        :type level: str

        :param title: Title used for vulnerability.
        :type title: str

        :param description: Free form text describing the vulnerability.
        :type description: str

        :param solution: Free form text describing a possible solution.
        :type solution: str

        :param plugin_id: ID of the plugin that found the vulnerability. Defaults to the calling plugin ID.
        :type plugin_id: str

        :param cvss_base: A float indication the CVSS base value.
        :type cvss_base: float

        :param cvss_base_vector: An string in format 'AV:N/AC:L/Au:N/C:N/I:N/A:P' indicating the CVSS base.
        :type cvss_base_vector: str

        :param cve: CVE IDs.
        :type cve: tuple( str, ... )

        :param cwe: CVE IDs.
        :type cwe: tuple( str, ... )

        :param bid: Bugtraq IDs.
        :type bid: tuple( str, ... )

        :param osvdb: OSVDB IDs.
        :type osvdb: tuple( str, ... )

        :param sa: Secunia Advisory IDs.
        :type sa: tuple( str, ... )

        :param sectrack: Security Tracker IDs.
        :type sectrack: tuple( str, ... )

        :param xf: ISS X-Force IDs.
        :type xf: tuple( str, ... )

        :param impact: Impact rating. A number between 0-4.
        :type impact: int

        :param severity: Severity rating. A number between 0-4.
        :type severity: int

        :param risk: Risk rating. A number between 0-4.
        :type risk: int

        :param references: Reference URLs.
        :type references: tuple(str)
        """

        # Do not allow abstract vulnerability types to be instanced.
        if self.vulnerability_type == "abstract":
            raise TypeError("Class %s is abstract!" % self.__class__.__name__)

        # Validate the keyword arguments.
        not_found = set(kwargs.keys()).difference(Vulnerability.DEFAULTS.keys())
        if not_found:
            raise TypeError("Unexpected keyword arguments: %s" % ", ".join(sorted(not_found)))
        del not_found

        # Newly found vulns are real by default.
        # However, if previously marked as false positives and found again,
        # the false positive mark stays put (@keep_true strategy).
        self.__false_positive = False

        # Set the properties.
        for prop in Vulnerability.DEFAULTS.iterkeys():
            value = kwargs.get(prop)
            if value is None:
                value = self.DEFAULTS.get(prop)
                if value is None:
                    value = Vulnerability.DEFAULTS.get(prop)
            setattr(self, prop, value)

        # Feed back references to vulnerability IDs.
        refs = convert_vuln_ids_to_references(self.taxonomies)
        refs.extend(self.references)
        self.references = refs # auto-sanitizes

        # Feed back vulnerability IDs to references.
        vuln_ids = convert_references_to_vuln_ids(self.references)
        for key, value in vuln_ids.iteritems():
            value.extend(getattr(self, key, []))
            setattr(self, key, value) # auto-sanitizes

        # Call the parent constructor.
        super(Vulnerability, self).__init__()


    #--------------------------------------------------------------------------
    def __repr__(self):
        return "<%s plugin_id=%r level=%r desc=%r>" % (
            self.__class__.__name__,
            self.plugin_id,
            self.level,
            self.description,
        )


    #--------------------------------------------------------------------------
    @staticmethod
    def __sanitize_vuln_ids(vid):
        if vid:
            if isinstance(vid, basestring):
                return (str(vid),)
            else:
                return tuple(sorted(set(vid)))
        else:
            return ()


    #--------------------------------------------------------------------------
    @keep_true
    def false_positive(self):
        """
        :returns: True for false positives, False for real vulnerabilities.
        :rtype: str
        """
        return self.__false_positive


    #--------------------------------------------------------------------------
    @false_positive.setter
    def false_positive(self, false_positive):
        """
        :returns: True for false positives, False for real vulnerabilities.
        :rtype: str
        """
        self.__false_positive = bool(false_positive)


    #--------------------------------------------------------------------------
    @keep_newer
    def plugin_id(self):
        """
        :returns: ID of the plugin that found the vulnerability.
        :rtype: str
        """
        return self.__plugin_id


    #--------------------------------------------------------------------------
    @plugin_id.setter
    def plugin_id(self, plugin_id):
        """
        :param plugin_id: ID of the plugin that found the vulnerability.
            Defaults to the calling plugin ID.
        :type plugin_id: str
        """
        if not plugin_id:
            try:
                plugin_id = Config.plugin_name
            except AttributeError:
                plugin_id = "GoLismero"
        self.__plugin_id = plugin_id


    #--------------------------------------------------------------------------
    @keep_newer
    def level(self):
        """
        :return: Vulnerability level.
        :rtype: str
        """
        return self.__level


    #--------------------------------------------------------------------------
    @level.setter
    def level(self, level):
        """
        :param level: User-friendly vulnerability level.
        :type level: str
        """
        if not isinstance(level, basestring):
            raise TypeError("Expected basestring, got '%s'" % type(level))
        elif level.lower() not in self.VULN_LEVELS:
            raise ValueError("Value of level are wrong. Allowed levels are: critical, high, middle, low, informational")

        self.__level = level.lower()


    #--------------------------------------------------------------------------
    @keep_newer
    def impact(self):
        """
        :returns: Impact rating.
        :rtype: int
        """
        return self.__impact


    #--------------------------------------------------------------------------
    @impact.setter
    def impact(self, impact):
        """
        :param impact: Impact rating.
        :type impact: int
        """
        if impact < 0 or impact > 4:
            raise ValueError("Impact values must be between 1-5.")

        self.__impact = impact


    #--------------------------------------------------------------------------
    @merge
    def bid(self):
        """
        :returns: Bugtraq IDs.
        :rtype: tuple( str, ... )
        """
        return self.__bid


    #--------------------------------------------------------------------------
    @bid.setter
    def bid(self, bid):
        """
        :param bid: Bugtraq IDs.
        :type bid: tuple( str, ... )
        """
        self.__bid = self.__sanitize_vuln_ids(bid)


    #--------------------------------------------------------------------------
    @merge
    def capec(self):
        """
        :returns: CAPEC IDs.
        :rtype: tuple( str, ... )
        """
        return self.__capec


    #--------------------------------------------------------------------------
    @capec.setter
    def capec(self, capec):
        """
        :param capec: CAPEC IDs.
        :type capec: tuple( str, ... )
        """
        self.__capec = self.__sanitize_vuln_ids(capec)


    #--------------------------------------------------------------------------
    @merge
    def cve(self):
        """
        :returns: CVE IDs.
        :rtype: tuple( str, ... )
        """
        return self.__cve


    #--------------------------------------------------------------------------
    @cve.setter
    def cve(self, cve):
        """
        :param cve: CVE IDs.
        :type cve: tuple( str, ... )
        """
        self.__cve = self.__sanitize_vuln_ids(cve)


    #--------------------------------------------------------------------------
    @merge
    def cwe(self):
        """
        :returns: CWE IDs.
        :rtype: tuple( str, ... )
        """
        return self.__cwe


    #--------------------------------------------------------------------------
    @cwe.setter
    def cwe(self, cwe):
        """
        :param cwe: CWE IDs.
        :type cwe: tuple( str, ... )
        """
        self.__cwe = self.__sanitize_vuln_ids(cwe)


    #--------------------------------------------------------------------------
    @merge
    def osvdb(self):
        """
        :returns: OSVDB IDs.
        :rtype: tuple( str, ... )
        """
        return self.__osvdb


    #--------------------------------------------------------------------------
    @osvdb.setter
    def osvdb(self, osvdb):
        """
        :param osvdb: OSVDB IDs.
        :type osvdb: tuple( str, ... )
        """
        self.__osvdb = self.__sanitize_vuln_ids(osvdb)


    #--------------------------------------------------------------------------
    @merge
    def sa(self):
        """
        :returns: Secunia Advisory IDs.
        :rtype: tuple( str, ... )
        """
        return self.__sa


    #--------------------------------------------------------------------------
    @sa.setter
    def sa(self, sa):
        """
        :param sa: Secunia Advisory IDs.
        :type sa: tuple( str, ... )
        """
        self.__sa = self.__sanitize_vuln_ids(sa)


    #--------------------------------------------------------------------------
    @merge
    def sectrack(self):
        """
        :returns: Security Tracker IDs.
        :rtype: tuple( str, ... )
        """
        return self.__sectrack


    #--------------------------------------------------------------------------
    @sectrack.setter
    def sectrack(self, sectrack):
        """
        :param sectrack: Security Tracker IDs.
        :type sectrack: tuple( str, ... )
        """
        self.__sectrack = self.__sanitize_vuln_ids(sectrack)


    #--------------------------------------------------------------------------
    @merge
    def xf(self):
        """
        :returns: ISS X-Force IDs.
        :rtype: tuple( str, ... )
        """
        return self.__xf


    #--------------------------------------------------------------------------
    @xf.setter
    def xf(self, xf):
        """
        :param xf: ISS X-Force IDs.
        :type xf: tuple( str, ... )
        """
        self.__xf = self.__sanitize_vuln_ids(xf)


    #--------------------------------------------------------------------------
    @keep_newer
    def severity(self):
        """
        :returns: Severity rating.
        :rtype: int
        """
        return self.__severity


    #--------------------------------------------------------------------------
    @severity.setter
    def severity(self, severity):
        """
        :param severity: Severity rating.
        :type severity: int
        """
        if severity < 0 or severity > 4:
            raise ValueError("Severity values must be between 1-5.")

        self.__severity = severity


    #--------------------------------------------------------------------------
    @keep_newer
    def risk(self):
        """
        :returns: Risk rating.
        :rtype: int
        """
        return self.__risk


    #--------------------------------------------------------------------------
    @risk.setter
    def risk(self, risk):
        """
        :param risk: Risk rating.
        :type risk: int
        """
        if risk < 0 or risk > 4:
            raise ValueError("Risk values must be between 1-5.")

        self.__risk = risk

    #--------------------------------------------------------------------------
    @keep_newer
    def cvss_base(self):
        """
        :returns: A float indication the CVSS base value.
        :rtype: float
        """
        return self.__cvss_base


    #--------------------------------------------------------------------------
    @cvss_base.setter
    def cvss_base(self, risk):
        """
        :param cvss_base: A float indication the CVSS base value.
        :type cvss_base: float
        """
        if cvss_base < 0 or cvss_base > 10.0:
            raise ValueError("CVSS base values must be between 0-10.")

        self.__cvss_base = cvss_base

    #--------------------------------------------------------------------------
    @keep_newer
    def cvss_base_vector(self):
        """
        :returns: An string in format 'AV:N/AC:L/Au:N/C:N/I:N/A:P' indicating the CVSS base.
        :rtype: str
        """
        return self.__cvss_base_vector


    #--------------------------------------------------------------------------
    @cvss_base_vector.setter
    def cvss_base_vector(self, cvss_base_vector):
        """
        :param cvss_base_vector: An string in format 'AV:N/AC:L/Au:N/C:N/I:N/A:P' indicating the CVSS base.
        :type cvss_base_vector: str
        """
        self.__cvss_base_vector = cvss_base_vector


    #--------------------------------------------------------------------------
    @keep_newer
    def solution(self):
        """
        :returns: Free form text describing a possible solution.
        :rtype: str
        """
        return self.__solution


    #--------------------------------------------------------------------------
    @solution.setter
    def solution(self, solution):
        """
        :param solution: Free form text describing a possible solution.
        :type solution: str
        """
        self.__solution = solution


    #--------------------------------------------------------------------------
    @keep_newer
    def title(self):
        """
        :returns: Free form text used for title of the vulnerability.
        :rtype: str
        """
        return self.__title


    #--------------------------------------------------------------------------
    @title.setter
    def title(self, title):
        """
        :param title: Free form text used for title of the vulnerability.
        :type title: str
        """
        self.__title = title


    #--------------------------------------------------------------------------
    @keep_newer
    def description(self):
        """
        :returns: Free form text describing the vulnerability.
        :rtype: str
        """
        return self.__description


    #--------------------------------------------------------------------------
    @description.setter
    def description(self, description):
        """
        :param description: Free form text describing the vulnerability.
        :type description: str
        """
        self.__description = description


    #--------------------------------------------------------------------------
    @keep_newer
    def references(self):
        """
        :returns: Reference URLs.
        :rtype: tuple(str)
        """
        return self.__references


    #--------------------------------------------------------------------------
    @references.setter
    def references(self, references):
        """
        :param references: Reference URLs.
        :type references: tuple(str)
        """

        # XXX HACK
        # This works for references too despite the name of the method! :)
        self.__references = self.__sanitize_vuln_ids(references)


    #--------------------------------------------------------------------------
    @property
    def taxonomies(self):
        """
        This alias concatenates all vulnerability IDs for all supported
        taxonomies into a single list.

        :returns: All vulnerability IDs for all taxonomies.
        :rtype: list(str)
        """
        return (
            self.bid +
            self.capec +
            self.cve +
            self.cwe +
            self.osvdb +
            self.sa +
            self.sectrack +
            self.xf
        )


#------------------------------------------------------------------------------
class GenericVulnerability(Vulnerability):
    """
    Generic vulnerability. This is useful for plugins that for some reason
    can't categorize the vulnerabilities they find. Avoid using it whenever
    possible!
    """

    vulnerability_type = "generic"


#------------------------------------------------------------------------------
class UrlVulnerability(Vulnerability):
    """
    Base class for all vulnerabilities associated with a single URL.
    """

    vulnerability_type = "abstract"

    min_resources = 1
    max_resources = 1
    max_informations = 0


    #--------------------------------------------------------------------------
    def __init__(self, url, **kwargs):
        """
        :param url: URL where the vulnerability was found.
        :type url: Url

        """

        # Sanitize the "url" argument.
        if not isinstance(url, Url) and not isinstance(url, FolderUrl) and not isinstance(url, BaseUrl):
            if isinstance(url, basestring):
                msg = "You should pass an Url object to %s instead of a string!"
                msg %= self.__class__.__name__
                url = Url(str(url))
                LocalDataCache.on_autogeneration(url)
            elif hasattr(url, "url"):
                try:
                    t = url.__class__.__name__
                except Exception:
                    t = str(type(url))
                msg = "You should pass an Url object to %s instead of %s!"
                msg %= (self.__class__.__name__, t)
                url = url.url
                if isinstance(url, basestring):
                    url = Url(str(url))
                    LocalDataCache.on_autogeneration(url)
                elif not isinstance(url, Url):
                    raise TypeError("Expected Url, got %r instead" % t)
            warn(msg, RuntimeWarning, stacklevel=2)

        # Save the raw URL.
        self.__url = url.url

        # Parent constructor. Must be called before adding associations!
        super(UrlVulnerability, self).__init__(**kwargs)

        # Add the reference to the URL where the vulnerability was found.
        self.add_resource(url)

    __init__.__doc__ += Vulnerability.__init__.__doc__


    #--------------------------------------------------------------------------
    def __str__(self):
        return self.url


    #--------------------------------------------------------------------------
    def __repr__(self):
        return "<%s url=%r plugin_id=%r level=%r desc=%r>" % (
            self.__class__.__name__,
            self.url,
            self.plugin_id,
            self.level,
            self.description,
        )


    #--------------------------------------------------------------------------
    @identity
    def url(self):
        """
        :return: Raw URL where the vulnerability was found.
        :rtype: str
        """
        return self.__url
