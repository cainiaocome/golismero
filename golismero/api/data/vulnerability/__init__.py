#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Vulnerability types.
"""

__license__ = """
GoLismero 2.0 - The web knife - Copyright (C) 2011-2013

Authors:
  Daniel Garcia Garcia a.k.a cr0hn | cr0hn<@>cr0hn.com
  Mario Vilas | mvilas<@>gmail.com

Golismero project site: https://github.com/cr0hn/golismero/
Golismero project mail: golismero.project<@>gmail.com

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""

__all__ = ["Vulnerability", "UrlVulnerability"]

from .. import Data, overwrite
from ..resource.url import Url

from warnings import warn


#------------------------------------------------------------------------------
class Vulnerability(Data):
    """
    Base class for all vulnerabilities.
    """

    data_type = Data.TYPE_VULNERABILITY
    vulnerability_type = "generic"
    max_vulnerabilities = 0


    # TODO: The vulnerability_type may be automatically obtained from the
    #       module pathname using introspection and a metaclass.


    # Default vulnerability properties.
    DEFAULTS = {
        "impact":     0,
        "severity":   0,
        "risk":       0,
        "cve":        "",
        "cwe":        "",
        "references": (),
    }


    #----------------------------------------------------------------------
    def __init__(self, **kwargs):
        """
        :param impact: Impact rating.
        :type impact: int

        :param cve: CVE ID.
        :type cve: str

        :param cwe: CVE ID.
        :type cwe: str

        :param severity: Severity rating.
        :type severity: int

        :param risk: Risk rating.
        :type risk: int

        :param references: Reference URLs.
        :type references: tuple(str)
        """

        # Validate the keyword arguments.
        not_found = set(kwargs.keys()).difference(Vulnerability.DEFAULTS.keys())
        if not_found:
            raise TypeError("Unexpected keyword arguments: %s" % ", ".join(sorted(not_found)))
        del not_found

        # Set the properties.
        for prop in Vulnerability.DEFAULTS.iterkeys():
            value = kwargs.get(prop)
            if value is None:
                value = self.DEFAULTS.get(prop)
                if value is None:
                    value = Vulnerability.DEFAULTS.get(prop)
            setattr(self, "_Vulnerability__%s" % prop, value)

        # Call the parent constructor.
        super(Vulnerability, self).__init__()


    #----------------------------------------------------------------------

    @overwrite
    def impact(self):
        """
        :returns: Impact rating.
        :rtype: int
        """
        return self.__impact

    @impact.setter
    def impact(self, impact):
        """
        :param impact: Impact rating.
        :type impact: int
        """
        self.__impact = impact

    @overwrite
    def cve(self):
        """
        :returns: CVE ID.
        :rtype: str
        """
        return self.__cve

    @cve.setter
    def cve(self, cve):
        """
        :param cve: CVE ID.
        :type cve: str
        """
        self.__cve = cve

    @overwrite
    def cwe(self):
        """
        :returns: CWE ID.
        :rtype: str
        """
        return self.__cwe

    @cwe.setter
    def cwe(self, cwe):
        """
        :param cwe: CWE ID.
        :type cwe: str
        """
        self.__cwe = cwe

    @overwrite
    def severity(self):
        """
        :returns: Severity rating.
        :rtype: int
        """
        return self.__severity

    @severity.setter
    def severity(self, severity):
        """
        :param severity: Severity rating.
        :type severity: int
        """
        self.__severity = severity

    @overwrite
    def risk(self):
        """
        :returns: Risk rating.
        :rtype: int
        """
        return self.__risk

    @risk.setter
    def risk(self, risk):
        """
        :param risk: Risk rating.
        :type risk: int
        """
        self.__risk = risk

    @overwrite
    def references(self):
        """
        :returns: Reference URLs.
        :rtype: tuple(str)
        """
        return self.__references

    @references.setter
    def references(self, references):
        """
        :param references: Reference URLs.
        :type references: tuple(str)
        """
        self.__references = references


#------------------------------------------------------------------------------
class UrlVulnerability(Vulnerability):
    """
    Base class for all vulnerabilities associated with a single URL.
    """

    min_resources = 1
    max_resources = 1
    max_informations = 0


    #----------------------------------------------------------------------
    def __init__(self, url, **kwargs):
        """
        :param url: URL where the vulnerability was found.
        :type url: Url

        :param impact: Impact rating.
        :type impact: int

        :param cve: CVE ID.
        :type cve: str

        :param cwe: CVE ID.
        :type cwe: str

        :param severity: Severity rating.
        :type severity: int

        :param risk: Risk rating.
        :type risk: int

        :param references: Reference URLs.
        :type references: list of str
        """

        # Sanitize the "url" argument.
        if not isinstance(url, Url):
            if type(url) in (str, unicode):
                msg = "You should pass an Url object to %s instead of a string!"
                msg %= self.__class__.__name__
                url = Url(url)
            elif hasattr(url, "url"):
                try:
                    t = url.__class__.__name__
                except Exception:
                    t = str(type(url))
                msg = "You should pass an Url object to %s instead of %s!"
                msg %= (self.__class__.__name__, t)
                url = url.url
                if type(url) in (str, unicode):
                    url = Url(url)
                elif not isinstance(url, Url):
                    raise TypeError("Expected Url, got %s instead" % t)
            warn(msg, RuntimeWarning)

        # Parent constructor. Must be called before adding associations!
        super(UrlVulnerability, self).__init__(**kwargs)

        # Add the reference to the URL where the vulnerability was found.
        self.add_resource(url)


    #----------------------------------------------------------------------
    def __str__(self):
        return str(self.url)

    def __repr__(self):
        return "<%s url=%s>" % (self.__class__.__name__, self.url.url)


    #----------------------------------------------------------------------

    @property
    def url(self):
        """
        :return: URL where the vulnerability was found.
        :rtype: Url
        """
        return self.associated_resources.pop()
