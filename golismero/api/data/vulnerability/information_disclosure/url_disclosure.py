#!/usr/bin/python
# -*- coding: utf-8 -*-

__license__="""
GoLismero 2.0 - The web knife - Copyright (C) 2011-2013

Authors:
  Daniel Garcia Garcia a.k.a cr0hn | cr0hn@cr0hn.com
  Mario Vilas | mvilas@gmail.com

Golismero project site: http://code.google.com/p/golismero/
Golismero project mail: golismero.project@gmail.com

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""

__all__ = ["UrlDisclosure"]

from ...resource.url import Url
from ..vulnerability import Vulnerability
from ....net.web_utils import DecomposedURL

from os.path import split


#------------------------------------------------------------------------------
class UrlDisclosure(Vulnerability):
    """
    URL disclosure vulnerability.
    """

    vulnerability_type = "information_disclosure/url_disclosure"

    max_resources = 1
    max_informations = 0
    max_vulnerabilities = 0


    #----------------------------------------------------------------------
    def __init__(self, url, impact=0, cve="", cwe="", severity=0, risk=0, references=()):
        """
        Vulnerability.

        :param url: URL where the vulnerability was found.
        :type url: Url

        :param impact: Impact rating.
        :type impact: int

        :param cve: CVE ID.
        :type cve: str

        :param cwe: CVE ID.
        :type cwe: str

        :param risk: risk of vulnerability
        :type risk: int

        :param severity: Severity rating.
        :type severity: int

        :param references: Reference URLs.
        :type references: list of str
        """

        # Cache for discovered part of URL.
        self.__discovered = None

        # Call the superclass constructor.
        super(UrlDisclosure, self).__init__(impact, cve, cwe, severity, risk, references)

        # Add the reference to the URL where the vulnerability was found.
        self.add_resource(url)


    #----------------------------------------------------------------------
    def __str__(self):
        return str(self.url)


    #----------------------------------------------------------------------

    @property
    def url(self):
        """
        str -- Raw URL
        """
        return self.associated_resources.pop()

    @property
    def method(self):
        """
        str -- HTTP method
        """
        return self.url.method

    @property
    def post_params(self):
        """
        dict(str) -- POST parameters
        """
        return self.url.post_params

    @property
    def discovered(self):
        """Part of URL discovered"""
        if not self.__discovered:
            self.__discovered = split(DecomposedURL(self.url.url).path)[1]
        return self.__discovered

    @property
    def referer(self):
        """
        Get referer or this Url
        """
        return self.url.referer

    @property
    def url_params(self):
        """
        dict(str) -- URL parameters
        """
        return self.url.url_params

    @property
    def is_https(self):
        """
        bool -- True if it's HTTPS, False otherwise
        """
        return self.url.is_https

    @property
    def has_url_param(self):
        """
        bool - True if there are URL params, False otherwise
        """
        return bool(self.url_params)

    @property
    def has_post_param(self):
        """
        bool - True if there are POST params, False otherwise
        """
        return bool(self.post_params)

    @property
    def content_type(self):
        """
        str - MIME content type
        """
        return self.url.content_type

    @property
    def request_type(self):
        """
        int - One of the HTML.TYPE_* constants
        """
        return self.url.request_type
